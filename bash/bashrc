#!/bin/bash

function setup_gpg {
	# Setup GPG
	if command -v gpgconf &>/dev/null; then
		if [[ "$HOSTNAME" == "revres" ]]; then
			gpgconf --create-socketdir
		elif [[ "$HOSTNAME" = "gemini" ]]; then
			gpgconf --create-socketdir
		else
			GPG_TTY=$(tty)
			SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
			export GPG_TTY
			export SSH_AUTH_SOCK
			gpgconf --launch gpg-agent
			gpg-connect-agent updatestartuptty /bye &>/dev/null
		fi
	fi
}

function load_executables {
	# Add Scripts
	export PATH="$PATH:$HOME/.scripts"
	source "$HOME/.aliases"

	# Nvm
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

	# Yarn
	if command -v yarn &>/dev/null; then
		PATH="$PATH:$(yarn global bin)"
		export PATH
	fi

	# Go
	if command -v go &>/dev/null; then
		PATH="$PATH:$(go env GOPATH)/bin"
		export PATH
	fi
	if [ -f /usr/local/go/bin/go ]; then
		PATH="$PATH:/usr/local/go/bin"
		export PATH
	fi

	# Setup Prompt
	source "$HOME/dotfiles/bash/prompt.sh"

	# Add case-insensitive line completion
	set completion-ignore-case on 
	
	[ -f ~/.fzf.bash ] && source ~/.fzf.bash [ -f ~/.fzf/key-bindings.bash ] && source ~/.fzf/key-bindings.bash [ -f /usr/share/bash-completion/completions/git ] && source /usr/share/bash-completion/completions/git
	export FZF_TMUX_OPTS='-d20%'

	if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
		alias nvim=nvr -cc split --remote-wait +'set bufhidden=wipe'
		export VISUAL="nvr -cc split --remote-wait +'set bufhidden=wipe'"
		export EDITOR="nvr -cc split --remote-wait +'set bufhidden=wipe'"
	else
		export VISUAL="nvim"
		export EDITOR="nvim"
	fi

	test -e "${HOME}/.cargo/env" && source "${HOME}/.cargo/env"
}

function prepare_mac {
	# setup_gpg
	load_executables

	# Used by vimrc
	export PLATFORM='mac'
	export PATH="$PATH:/opt/homebrew/bin"

	# Enable Homebrew
	eval "$(/opt/homebrew/bin/brew shellenv)"

	# Disable Homebrew telemetry
	export HOMEBREW_NO_ANALYTICS=1

	# Disable bash deprecation warning in macOS
	export BASH_SILENCE_DEPRECATION_WARNING=1

	# Add bash completions
	[[ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]] && . "/opt/homebrew/etc/profile.d/bash_completion.sh"

	# Enable iterm2 shell integrations
	test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"

	# Path
	export JAVA_HOME='/opt/homebrew/Cellar/openjdk/19.0.2/libexec/openjdk.jdk/Contents/Home'
	export PATH="/opt/homebrew/opt/curl/bin:$PATH"
	export PATH="/Users/kangus/.local/bin:$PATH"
	export PATH="$PATH:/Users/kangus/Library/Python/3.9/bin"
}

function prepare_wsl {
	# setup_gpg
	load_executables
}

if [[ $OSTYPE == *'darwin'* ]]; then
	prepare_mac
elif [ -v WSL_DISTRO_NAME ]; then
	prepare_wsl
else
	echo "Distro not configured"
fi

export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init - bash)"
