let skip_defaults_vim=1
set nocompatible


" Move viminfo file path
set viminfo+='100,n~/.vim/viminfo

" Automatically indent new lines
set autoindent

" Add line numbers
set number

" Add column and row position in bottom right
set ruler

" Always show what mode we're in
set showmode

" Set tab size and all that
set tabstop=2
set softtabstop=2
set shiftwidth=2
set smartindent
set smarttab
set expandtab

" Stop vim from adding a new line at the end of a file
if v:version >= 800
	set nofixendofline
endif

" Keep lines from going over 80 characters
"set textwidth=0

" Disable relative line numbers
set norelativenumber

" Enable spell checking
"set spell

" Disable swap files and all that nonsense
set nobackup
set noswapfile
set nowritebackup

" Highlight search hits
set hlsearch
set incsearch
set linebreak
map <silent> <leader><cr> :noh<cr>:redraw!<cr>

" Disable the 'Hit Enter...' messages
set shortmess=aoOtI

" Show matching brackets
set showmatch

" Fix delete on macOS, requires ENV variable: $PLATFORM
if $PLATFORM == 'mac'
  set backspace=indent,eol,start
endif

" Set command history
set history=100

" Enable syntax colors
syntax enable

" Faster scrolling
set ttyfast




" Git Statusline functions
function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

function! StatuslineMode()
  let l:mode=mode()
  if l:mode==#"n"
    return "Normal"
  elseif l:mode==?"v"
    return "Visual"
  elseif l:mode==#"i"
    return "Insert"
  elseif l:mode==#"R"
    return "Replace"
  elseif l:mode==?"s"
    return "Select"
  elseif l:mode==#"t"
    return "Terminal"
  elseif l:mode==#"c"
    return "Command"
  elseif l:mode==#"!"
    return "Shell"
  endif
endfunction

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col | getline('.')[col - 1] = ~# '\s'
endfunction

" Install vim-plug if it's not already installed
if v:version >= 800 && executable('curl') && empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

" Load plugins if vim-pug is installed
if filereadable(expand("~/.vim/autoload/plug.vim"))

  " Plugins
  call plug#begin("~/.vim/.plug")
  Plug 'sheerun/vim-polyglot'
  Plug 'neoclide/coc.nvim', { 'branch': 'release' }
  call plug#end()

  hi Normal ctermbg=NONE " for transparent background
  hi SpellBad ctermbg=red  
  hi SpellRare ctermbg=red
  hi Special ctermfg=cyan 
  hi SignColumn ctermbg=NONE

  set signcolumn=yes

  " Status line
  set noruler
  set laststatus=2
  set statusline=
  set statusline+=%{StatuslineMode()} 
  set statusline+=%#CocFadeOut#
  set statusline+=%{StatuslineGit()}
  set statusline+=%#LineNr#
  set statusline+=%*\ %<%.60F%*                      " path, trunc to 80 length
  set statusline+=%=
  set statusline+=%*\ %l:%c%*                        " current line and column
  set statusline+=%*\ %p%%%*\                          " percentage
  set statusline+=%#CocFadeOut#
  set statusline+=[%{strlen(&ft)?&ft:'none'}]      " filetype
  set cmdheight=1

  " Coc.nvim completions: Tab = next, S-Tab = previous 
  inoremap <silent><expr> <Tab>
        \ coc#pum#visible() ? coc#pum#next(1):
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
  inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

  " Coc: Hit enter to accept suggestion
  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
        \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
  
  nnoremap <silent> K :call ShowDocumentation()<CR>

  function! ShowDocumentation()
    if CocAction('hasAction', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endfunction

  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Rename Symbol
  nmap <leader>rn <Plug>(coc-rename)

endif


" Better command completion
set wildmenu

" Disable search highlighting with <C-L> when refreshing screen
nnoremap <C-L> :nohl<CR><C-L>

" Enable omni-completion
set omnifunc=syntaxcomplete#Complete

" Force file names to be a specific file type
au bufnewfile,bufRead *.bash* set ft=sh
au bufnewfile,bufRead *.crontab set filetype=crontab
au bufnewfile,bufRead *ssh/config set filetype=sshconfig
au bufnewfile,bufRead .dockerignore set filetype=gitignore
au bufnewfile,bufRead *gitconfig set filetype=gitconfig

" Start at the last place you were editing
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Enable mouse
set mouse=a

" Disable arrow keys to become a Vim Master
noremap <up> :echoerr "Use k instead"<CR>
noremap <down> :echoerr "Use j instead"<CR>
noremap <left> :echoerr "Use h instead"<CR>
noremap <right> :echoerr "Use l instead"<CR>

" Better page down and page up
noremap <C-n> <C-d>
noremap <C-p> <C-b>

hi StatusLineNC term=bold cterm=bold gui=bold
hi StatusLine term=bold cterm=bold gui=bold
